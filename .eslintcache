[{"/Users/abulerforrest/workspace/wordrazer/src/serviceWorker.ts":"1","/Users/abulerforrest/workspace/wordrazer/src/stores/RootStore.ts":"2","/Users/abulerforrest/workspace/wordrazer/src/services/GamePageService.ts":"3","/Users/abulerforrest/workspace/wordrazer/src/App.tsx":"4","/Users/abulerforrest/workspace/wordrazer/src/themes/theme.tsx":"5","/Users/abulerforrest/workspace/wordrazer/src/controllers/pages/GamePageController.tsx":"6","/Users/abulerforrest/workspace/wordrazer/src/stores/GamePageStore.ts":"7","/Users/abulerforrest/workspace/wordrazer/src/stores/TitlePageStore.ts":"8","/Users/abulerforrest/workspace/wordrazer/src/controllers/3Dengine/ThreeJSController/index.ts":"9","/Users/abulerforrest/workspace/wordrazer/src/models/PlayerModel.ts":"10","/Users/abulerforrest/workspace/wordrazer/src/controllers/gamelogic/WordController.ts":"11","/Users/abulerforrest/workspace/wordrazer/src/utils/keyCodes.ts":"12","/Users/abulerforrest/workspace/wordrazer/src/components/pages/GamePage/index.ts":"13","/Users/abulerforrest/workspace/wordrazer/src/models/WordsModel.ts":"14","/Users/abulerforrest/workspace/wordrazer/src/models/HiscoreModel.ts":"15","/Users/abulerforrest/workspace/wordrazer/src/controllers/3Dengine/ThreeJSController/ThreeJSController.ts":"16","/Users/abulerforrest/workspace/wordrazer/src/components/pages/GamePage/GamePage.tsx":"17","/Users/abulerforrest/workspace/wordrazer/src/components/organisms/PlayerStatus/PlayerStatus.tsx":"18","/Users/abulerforrest/workspace/wordrazer/src/components/pages/TitlePage/index.ts":"19","/Users/abulerforrest/workspace/wordrazer/src/components/organisms/Word/index.ts":"20","/Users/abulerforrest/workspace/wordrazer/src/components/organisms/PlayerRegistration/index.ts":"21","/Users/abulerforrest/workspace/wordrazer/src/components/pages/TitlePage/TitlePage.tsx":"22","/Users/abulerforrest/workspace/wordrazer/src/components/organisms/Word/Word.tsx":"23","/Users/abulerforrest/workspace/wordrazer/src/components/organisms/PlayerRegistration/PlayerRegistration.tsx":"24","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/index.ts":"25","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Letter/index.ts":"26","/Users/abulerforrest/workspace/wordrazer/src/components/organisms/Hiscore/Hiscore.tsx":"27","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Letter/Letter.tsx":"28","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Button/index.ts":"29","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Logo/index.ts":"30","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Typography/index.ts":"31","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Link/index.ts":"32","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/GameTimer/index.ts":"33","/Users/abulerforrest/workspace/wordrazer/src/components/molecules/Input/index.ts":"34","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Button/Button.tsx":"35","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Logo/Logo.tsx":"36","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Typography/Typography.tsx":"37","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Link/Link.tsx":"38","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/GameTimer/GameTimer.tsx":"39","/Users/abulerforrest/workspace/wordrazer/src/components/molecules/Input/Input.tsx":"40","/Users/abulerforrest/workspace/wordrazer/src/index.tsx":"41","/Users/abulerforrest/workspace/wordrazer/src/controllers/index.ts":"42","/Users/abulerforrest/workspace/wordrazer/src/components/pages/index.tsx":"43","/Users/abulerforrest/workspace/wordrazer/src/controllers/pages/index.ts":"44","/Users/abulerforrest/workspace/wordrazer/src/controllers/pages/TitlePageController.tsx":"45"},{"size":5187,"mtime":1609719770322,"results":"46","hashOfConfig":"47"},{"size":495,"mtime":1609718593939,"results":"48","hashOfConfig":"47"},{"size":1361,"mtime":1609718493094,"results":"49","hashOfConfig":"47"},{"size":522,"mtime":1609719167735,"results":"50","hashOfConfig":"47"},{"size":7755,"mtime":1609894395012,"results":"51","hashOfConfig":"47"},{"size":7195,"mtime":1609890248731,"results":"52","hashOfConfig":"47"},{"size":865,"mtime":1609718568183,"results":"53","hashOfConfig":"47"},{"size":707,"mtime":1609718607868,"results":"54","hashOfConfig":"47"},{"size":37,"mtime":1609717230551,"results":"55","hashOfConfig":"47"},{"size":1113,"mtime":1609790015430,"results":"56","hashOfConfig":"47"},{"size":573,"mtime":1609717442997,"results":"57","hashOfConfig":"47"},{"size":504,"mtime":1609719056165,"results":"58","hashOfConfig":"47"},{"size":85,"mtime":1609716997017,"results":"59","hashOfConfig":"47"},{"size":626,"mtime":1609718431130,"results":"60","hashOfConfig":"47"},{"size":1022,"mtime":1609718360271,"results":"61","hashOfConfig":"47"},{"size":11171,"mtime":1609890897086,"results":"62","hashOfConfig":"47"},{"size":6445,"mtime":1609891382294,"results":"63","hashOfConfig":"47"},{"size":4880,"mtime":1609895251854,"results":"64","hashOfConfig":"47"},{"size":89,"mtime":1609717111347,"results":"65","hashOfConfig":"47"},{"size":69,"mtime":1609716944941,"results":"66","hashOfConfig":"47"},{"size":125,"mtime":1609716697292,"results":"67","hashOfConfig":"47"},{"size":2345,"mtime":1609717188434,"results":"68","hashOfConfig":"47"},{"size":1958,"mtime":1609716965108,"results":"69","hashOfConfig":"47"},{"size":3312,"mtime":1609770208430,"results":"70","hashOfConfig":"47"},{"size":133,"mtime":1609719544443,"results":"71","hashOfConfig":"47"},{"size":77,"mtime":1609715589819,"results":"72","hashOfConfig":"47"},{"size":1868,"mtime":1609716663813,"results":"73","hashOfConfig":"47"},{"size":2386,"mtime":1609894813588,"results":"74","hashOfConfig":"47"},{"size":77,"mtime":1609715538459,"results":"75","hashOfConfig":"47"},{"size":69,"mtime":1609715732712,"results":"76","hashOfConfig":"47"},{"size":93,"mtime":1609715779985,"results":"77","hashOfConfig":"47"},{"size":69,"mtime":1609715630480,"results":"78","hashOfConfig":"47"},{"size":89,"mtime":1609719486749,"results":"79","hashOfConfig":"47"},{"size":73,"mtime":1609716449097,"results":"80","hashOfConfig":"47"},{"size":2788,"mtime":1609719458930,"results":"81","hashOfConfig":"47"},{"size":2196,"mtime":1609715759253,"results":"82","hashOfConfig":"47"},{"size":3004,"mtime":1609716158972,"results":"83","hashOfConfig":"47"},{"size":716,"mtime":1609715695786,"results":"84","hashOfConfig":"47"},{"size":1236,"mtime":1609716192391,"results":"85","hashOfConfig":"47"},{"size":7139,"mtime":1609716584386,"results":"86","hashOfConfig":"47"},{"size":1888,"mtime":1609719202811,"results":"87","hashOfConfig":"47"},{"size":25,"mtime":1609717791807,"results":"88","hashOfConfig":"47"},{"size":57,"mtime":1609717205773,"results":"89","hashOfConfig":"47"},{"size":77,"mtime":1609717728138,"results":"90","hashOfConfig":"47"},{"size":735,"mtime":1609717763112,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"95"},"1xww0v",{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"95"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"95"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"95"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"95"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"95"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"95"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"95"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"95"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"95"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"95"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"/Users/abulerforrest/workspace/wordrazer/src/serviceWorker.ts",["196","197"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n",[],"/Users/abulerforrest/workspace/wordrazer/src/stores/RootStore.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/services/GamePageService.ts",["198","199"],"import { IGamePageService } from '../interfaces';\n\nimport { IWord } from '../interfaces/Word';\n\nexport class GamePageService implements IGamePageService {\n  public async fetchWordsFromApi(count: number): Promise<IWord[]> {\n    const response: IWord[] = [];\n    /* DISABLED\n\t\treturn fetch(\"https://retrocomputer-words-api.herokuapp.com/api/v1/words/limit/3\")\n\t\t.then(response => response.json())\n\t\t.then(words => {\n\t\t\tresponse = [words[\"word\"]][0];\n\t\t\treturn response;\n\t\t});\n*/\n    // MOCK\n    return [\n      {\n        word: 'spaceinvaders',\n        _id: '5d840540f0f91eaddb96986e',\n      },\n      {\n        word: 'abacuss',\n        _id: '5d840540f0f91eaddb96986f',\n      },\n      {\n        word: 'advancements',\n        _id: '5d840540f0f91eaddb969932',\n      },\n      {\n        word: 'emulation',\n        _id: '5d840540f0f91eaddb969933',\n      },\n      {\n        word: 'adventure',\n        _id: '5d840540f0f91eaddb969930',\n      },\n      {\n        word: 'amiga',\n        _id: '5d840540f0f91eaddb96992e',\n      },\n      {\n        word: 'levelup',\n        _id: '5d840540f0f91eaddb969935',\n      },\n      {\n        word: 'levelup',\n        _id: '5d840540f0f91eaddb969929',\n      },\n      {\n        word: 'computer',\n        _id: '5d840540f0f91eaddb969928',\n      },\n      {\n        word: 'adrenalin',\n        _id: '5d840540f0f91eaddb969927',\n      },\n    ];\n  }\n}\n","/Users/abulerforrest/workspace/wordrazer/src/App.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/themes/theme.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/controllers/pages/GamePageController.tsx",["200","201","202","203","204"],"import { action, autorun, computed, observable, IObservableArray } from 'mobx';\n\nimport { createViewModel, IViewModel } from 'mobx-utils';\nimport { PlayerModel } from '../../models/PlayerModel';\n\nimport { RootStore } from '../../stores/RootStore';\nimport { GamePageStore } from '../../stores/GamePageStore';\n\nimport { IGamePageController } from '../../interfaces/pages/GamePageController';\n\nimport { WordController } from '../gamelogic/WordController';\nimport { WordsModel } from '../../models/WordsModel';\nimport { IWordController } from '../../interfaces/gamelogic';\nimport { controlledChars } from '../../utils/keyCodes';\nimport { ThreeJSController } from '../3Dengine/ThreeJSController';\nimport { IThreeJSController } from '../../interfaces/3Dengine/ThreeJSController';\n\nexport class GamePageController extends ThreeJSController implements IGamePageController {\n  private readonly rootStore: RootStore;\n  private readonly store: GamePageStore;\n  private readonly threeJSController: IThreeJSController;\n\n  @observable private readonly model: PlayerModel;\n  @observable private allWordControllers: IObservableArray<IWordController> = observable([]);\n  @observable public activeWordController: IWordController = [];\n\n  @observable public loading = false;\n\n  @observable private minNameLength = 2;\n  @observable private maxNameLength = 30;\n  @observable public countDownNumber = 0;\n\n  @observable public keyInput = '';\n  @observable public gameCurrentTime = '';\n  @observable public currentTextInput = '';\n\n  @observable public timer: any = null;\n  @observable public errorMessages: any = null;\n  @observable public viewModel: PlayerModel & IViewModel<PlayerModel>;\n  @observable public gameStartedTime: any = new Date();\n\n  @observable public gameIsOngoing = false;\n  @observable public gameHasStarted = false;\n  @observable public runBackgroundAnim = false;\n  @observable public showPlayerRegistration = true;\n\n  constructor(rootStore: RootStore, threeJSController: IThreeJSController) {\n    super();\n\n    this.rootStore = rootStore;\n    this.threeJSController = threeJSController;\n\n    this.store = rootStore.gamePageStore;\n\n    this.model = new PlayerModel();\n    this.viewModel = createViewModel(this.model);\n\n    this.errorMessages = {\n      0: `Cannot exceed ${this.maxNameLength} characters.`,\n      1: `Must be at least ${this.minNameLength} characters in length.`,\n      2: 'Accepting letters, numbers [a-z åäö _ !]',\n    };\n\n    this.load().then(() => {\n      console.log('yah');\n    });\n  }\n\n  @computed get showTimer(): boolean {\n    return this.gameHasStarted && this.countDownNumber === 0;\n  }\n\n  @computed get showInputClearIcon(): boolean {\n    return this.viewModel.model.name !== '';\n  }\n\n  @computed get validateMinTextLength(): boolean {\n    const name = this.viewModel.model.name;\n    return name.length < this.minNameLength && name.length > 0;\n  }\n\n  @computed get validateMaxTextLength(): boolean {\n    const name = this.viewModel.model.name;\n    return name.length < this.maxNameLength;\n  }\n\n  @computed get validateLetterNumberOnly(): boolean {\n    const letterNumberOnly = /^([a-zA-Z0-9åäöÅÄÖ!_]+\\s)*[a-zA-Z0-9åäöÅÄÖ!_]+$/;\n    const name = this.viewModel.model.name;\n\n    return !name.match(letterNumberOnly) && name.length > 0;\n  }\n\n  @computed get inputValidated(): boolean {\n    return (\n      this.validateMaxTextLength &&\n      !this.validateMinTextLength &&\n      !this.validateLetterNumberOnly &&\n      this.viewModel.model.name.length !== 0\n    );\n  }\n\n  @computed get inputState(): string {\n    if (!this.validateMaxTextLength) {\n      return 'error';\n    } else if (\n      !this.validateMinTextLength &&\n      !this.validateLetterNumberOnly &&\n      this.viewModel.model.name.length >= this.minNameLength\n    ) {\n      return 'success';\n    } else {\n      return 'default';\n    }\n  }\n\n  @computed get getWords(): IWordController {\n    return [];\n  }\n\n  @computed get textValidateMessage(): string {\n    const errors: string[] = [];\n\n    if (this.validateMinTextLength) {\n      errors.push(this.errorMessages[1]);\n    }\n    if (!this.validateMaxTextLength) {\n      errors.push(this.errorMessages[0]);\n    }\n    if (this.validateLetterNumberOnly) {\n      errors.push(this.errorMessages[2]);\n    }\n    return errors.join(' - ');\n  }\n\n  private async load(): Promise<void> {\n    this.loading = true;\n\n    // side effects\n    autorun(() => {\n      // init timer\n      if (this.showTimer) {\n        this.initTimer();\n      }\n\n      if (this.gameHasStarted) {\n        this.threeJSController.gameHasStarted = true;\n        // render stage to the canvas\n        this.threeJSController.renderStage();\n      }\n      if (this.gameHasStarted && this.countDownNumber === 0) {\n        // start game animation\n        this.threeJSController.startGameAnimation(0.0002);\n      }\n    });\n\n    try {\n      await this.store.fetchWordsFromApi(1000);\n\n      this.store.getWords();\n\n      const wordControllers: IWordController[] = [];\n\n      for (const model of this.store.getWords()) {\n        const rowController = this.createWordController(model);\n        wordControllers.push(rowController);\n      }\n\n      this.allWordControllers.replace(wordControllers);\n      // eslint-disable-next-line no-empty\n    } catch (error) {\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  private createWordController(model: WordsModel): IWordController {\n    return new WordController(this.rootStore, this, model);\n  }\n\n  @action toggleBackgroundAnim(): void {\n    this.runBackgroundAnim = !this.runBackgroundAnim;\n  }\n\n  @action\n  public initTimer(): void {\n    this.timer = setInterval(() => this.updateCurrentTime(), 10);\n    this.gameStartedTime = new Date();\n    this.gameIsOngoing = true;\n  }\n\n  @action\n  public clearTimer(): void {\n    clearInterval(this.timer);\n    this.gameIsOngoing = false;\n  }\n\n  @action\n  public updateCurrentTime(): void {\n    const currentTime: any = new Date();\n\n    const timeElapsed = new Date(currentTime - this.gameStartedTime);\n\n    const min = timeElapsed.getUTCMinutes();\n    const sec = timeElapsed.getUTCSeconds();\n    const ms = timeElapsed.getUTCMilliseconds();\n\n    this.gameCurrentTime = `${min}:${sec}:${ms}`;\n  }\n\n  @action\n  public onKeyboardInput(event: KeyboardEvent): void {\n    // if the keyCode is not a letter\n    if (!controlledChars().includes(event.keyCode)) {\n      this.currentTextInput = this.currentTextInput + event.key;\n    }\n    // update current key\n    this.keyInput = event.key;\n  }\n\n  @action\n  public toggleShowPlayerRegistration(): void {\n    this.showPlayerRegistration = !this.showPlayerRegistration;\n  }\n\n  @action\n  public startGame(): void {\n    this.toggleShowPlayerRegistration();\n    this.viewModel.submit();\n    this.countDownTimer(3);\n    this.gameHasStarted = true;\n  }\n\n  @action\n  public onInputKeypress(value: string): void {\n    this.viewModel.model.name = value;\n  }\n\n  @action\n  public clearInput(type: string): void {\n    this.viewModel.reset();\n  }\n\n  @action\n  public countDownTimer(seconds: number): void {\n    this.countDownNumber = seconds;\n    setInterval(() => {\n      if (this.countDownNumber !== 0) {\n        this.countDownNumber = seconds--;\n      }\n    }, 1000);\n  }\n}\n","/Users/abulerforrest/workspace/wordrazer/src/stores/GamePageStore.ts",["205"],"import { RootStore } from './RootStore';\nimport { observable, ObservableMap, action } from 'mobx';\nimport { WordsModel } from '../models/WordsModel';\nimport { IWord } from '../interfaces/Word';\n\ntype WordsMap = ObservableMap<IWord, WordsModel>;\n\nexport class GamePageStore {\n  private readonly rootStore: RootStore;\n  private readonly words: WordsMap = observable.map();\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  }\n\n  @action\n  public async fetchWordsFromApi(count: number): Promise<void> {\n    const words: any[] = await this.rootStore.services.gamePageService.fetchWordsFromApi(count);\n\n    for (const word in words) {\n      const wordsModel = new WordsModel(words[word]);\n\n      this.words.set(words[word], wordsModel);\n    }\n  }\n\n  @action\n  public getWords(): IterableIterator<WordsModel> {\n    return this.words.values();\n  }\n}\n","/Users/abulerforrest/workspace/wordrazer/src/stores/TitlePageStore.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/controllers/3Dengine/ThreeJSController/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/models/PlayerModel.ts",["206","207","208","209","210","211","212"],"import { action, observable } from 'mobx';\n\nimport { Model } from './Model';\nimport { IPlayer } from '../interfaces/Player';\n\nexport type PlayerModelPartial = Model<IPlayer, 'name'>;\n\nexport class PlayerModel implements PlayerModelPartial {\n  @observable public id = 0;\n  @observable public name = '';\n  @observable public gameTime?: Date;\n  @observable public level?: number = 0;\n  @observable public lives?: number = 0;\n  @observable public score?: number = 0;\n  // public localValues!: any;\n  // public localComputedValues: any;\n  constructor(player?: Partial<IPlayer>) {\n    this.fromJson(player!);\n  }\n\n  @action\n  public fromJson(player: Partial<IPlayer>): void {\n    if (player) {\n      this.id = player.id!;\n      this.name = player.name!;\n      this.level = player.level!;\n      this.lives = player.lives!;\n      this.score = player.score!;\n      this.gameTime = player.gameTime!;\n    }\n  }\n\n  public toJson(): Partial<IPlayer> {\n    return {\n      id: this.id,\n      name: this.name,\n      level: this.level,\n      lives: this.lives,\n      score: this.score,\n      gameTime: this.gameTime,\n    };\n  }\n}\n","/Users/abulerforrest/workspace/wordrazer/src/controllers/gamelogic/WordController.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/utils/keyCodes.ts",["213"],"export const controlledChars = () => {\n  return [\n    8,\n    9,\n    13,\n    16,\n    17,\n    18,\n    19,\n    20,\n    46,\n    45,\n    40,\n    39,\n    38,\n    37,\n    36,\n    35,\n    34,\n    33,\n    32,\n    27,\n    104,\n    106,\n    105,\n    107,\n    109,\n    110,\n    111,\n    112,\n    113,\n    114,\n    115,\n    116,\n    117,\n    118,\n    119,\n    120,\n    121,\n    122,\n    123,\n    144,\n    145,\n    186,\n    187,\n    188,\n    189,\n    190,\n    191,\n    192,\n    219,\n    220,\n    221,\n    222,\n  ];\n};\n","/Users/abulerforrest/workspace/wordrazer/src/components/pages/GamePage/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/models/WordsModel.ts",["214","215","216"],"import { action, observable } from 'mobx';\n\nimport { Model } from './Model';\nimport { IWord } from '../interfaces/Word';\n\nexport type WordsModelPartial = Model<IWord, '_id' | 'word'>;\n\nexport class WordsModel implements WordsModelPartial {\n  @observable public _id = '';\n  @observable public word = '';\n\n  constructor(word?: Partial<IWord>) {\n    this.fromJson(word!);\n  }\n\n  @action\n  public fromJson(word: Partial<IWord>): void {\n    if (word) {\n      this._id = word._id!;\n      this.word = word.word!;\n    }\n  }\n\n  public toJson(): WordsModelPartial {\n    return {\n      _id: this._id,\n      word: this.word,\n    };\n  }\n}\n","/Users/abulerforrest/workspace/wordrazer/src/models/HiscoreModel.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/controllers/3Dengine/ThreeJSController/ThreeJSController.ts",["217","218","219","220","221","222"],"import { IThreeJSController } from '../../../interfaces/3Dengine/ThreeJSController';\n\nimport * as THREE from 'three';\n\nimport { action, observable } from 'mobx';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { GlitchPass } from 'three/examples/jsm/postprocessing/GlitchPass';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\nimport { HalftonePass } from 'three/examples/jsm/postprocessing/HalftonePass';\n\nexport class ThreeJSController implements IThreeJSController {\n  @observable private scene: THREE.Scene = new THREE.Scene();\n  @observable public readonly renderer: THREE.WebGLRenderer = new THREE.WebGLRenderer({\n    antialias: true,\n    alpha: true,\n  });\n  @observable public readonly composer: EffectComposer = new EffectComposer(this.renderer);\n  @observable private instance = 0;\n\n  @observable public camera: THREE.PerspectiveCamera = new THREE.PerspectiveCamera(\n    75,\n    window.innerWidth / window.innerHeight,\n    0.1,\n    1000,\n  );\n\n  @observable public gameHasStarted = false;\n  @observable private hwSegments = 90;\n  @observable private terrain: any = new THREE.Mesh(this.geometry(), this.material());\n  @observable private stars: THREE.Mesh[] = [];\n  @observable private zoomX = 6; // default: 6\n  @observable private zoomY = 18; // default: 18\n  @observable private simplex: any = null;\n  @observable public noiseIntensity = 1.8;\n  @observable public animationSpeed = 0.0;\n  @observable public starfieldDelay = 10;\n  @observable public showStarfield = true;\n  @observable public text: THREE.Mesh = new THREE.Mesh();\n  @observable public font: THREE.Font = new THREE.Font(null);\n\n  @observable public cameraPosition: any = {\n    x: 0,\n    y: -20,\n    z: 0,\n  };\n\n  @observable public enableCameraJump = true;\n  @observable public cameraJumpIntensity = 0.0;\n  @observable public showBackground = false;\n  @observable public backgroundURL = '../../../assets/img/bg.jpg';\n\n  constructor() {\n    this.renderer.setClearColor(0x000000);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  public setup(): void {\n    this.initNoise();\n    this.initScene();\n    this.initCamera();\n    this.initRenderer();\n    this.initTerrain();\n    this.initLights();\n    if (this.showStarfield) {\n      this.initStarfield();\n    }\n    this.initAfterEffects();\n  }\n\n  @action\n  public renderStage(): void {\n    if (this.gameHasStarted) {\n      this.draw();\n    }\n  }\n\n  @action\n  public onWindowResize(): void {\n    this.camera.aspect = window.innerWidth / window.innerHeight;\n    this.camera.updateProjectionMatrix();\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n\n  @action\n  public startGameAnimation(speed: number): void {\n    this.animationSpeed = speed;\n    this.showStarfield = true;\n  }\n\n  @action\n  private initStarfield(): void {\n    for (let z = -1000; z < 1000; z += 20) {\n      const geometry = new THREE.SphereGeometry(0.5, 32, 32);\n\n      const material = new THREE.MeshBasicMaterial({ color: 0xffffff });\n\n      const sphere = new THREE.Mesh(geometry, material);\n\n      sphere.position.x = Math.random() * 1500 - 500;\n      sphere.position.y = Math.random() * 1500 - 500;\n      sphere.position.z = z;\n      sphere.scale.x = sphere.scale.y = 2;\n\n      this.scene.add(sphere);\n      this.stars.push(sphere);\n    }\n  }\n\n  private randAfterEffect(\n    startDelayMs: number,\n    effect: any,\n    composer: EffectComposer,\n    intervalApproxMs: number,\n    durationApproxMs: number,\n  ): void {\n    const pass = effect;\n\n    const addEffect = () => {\n      if (this.gameHasStarted) {\n        const addEffectMs = Math.floor(\n          Math.random() * (intervalApproxMs - intervalApproxMs / 2 + 1),\n        );\n        const removeEffectMs = Math.floor(\n          Math.random() * (durationApproxMs - durationApproxMs / 2 + 1),\n        );\n        composer.removePass(pass);\n        composer.addPass(pass);\n        setTimeout(function () {\n          composer.removePass(pass);\n        }, removeEffectMs);\n        clearInterval(timer);\n        timer = setInterval(addEffect, addEffectMs);\n      }\n    };\n    let timer: NodeJS.Timeout = setInterval(addEffect, startDelayMs);\n  }\n\n  private initAfterEffects(): void {\n    // --- setup\n    const renderScene = new RenderPass(this.scene, this.camera);\n    this.composer.addPass(renderScene);\n    this.composer.setSize(window.innerWidth, window.innerHeight);\n    // --- init glitch effect\n    const glitchPass = new GlitchPass();\n    // --- halftone effect\n    const halftonePass = new HalftonePass(window.innerWidth, window.innerHeight, {\n      shape: 1,\n      radius: 1,\n      rotateR: Math.PI / 12,\n      rotateB: (Math.PI / 12) * 2,\n      rotateG: (Math.PI / 12) * 3,\n      scatter: 0,\n      blending: 0.2,\n      blendingMode: 0.5,\n      greyscale: false,\n      disable: false,\n    });\n    // --- init bloom effect\n    const bloomPass = new UnrealBloomPass(\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\n      0.8,\n      0.1,\n      0,\n    );\n    this.composer.addPass(bloomPass);\n    // --- init FXAA shader\n    const effectFXAA = new ShaderPass(FXAAShader);\n    effectFXAA.uniforms['resolution'].value.x =\n      1 / (window.innerWidth * this.renderer.getPixelRatio());\n    effectFXAA.uniforms['resolution'].value.y =\n      1 / (window.innerHeight * this.renderer.getPixelRatio());\n    // --- apply the effects\n    this.composer.addPass(halftonePass);\n    this.randAfterEffect(25000, glitchPass, this.composer, 60000, 2000);\n    this.composer.addPass(effectFXAA);\n  }\n\n  private initLights(): void {\n    const ambientLight = new THREE.AmbientLight(0xff00de);\n    ambientLight.intensity = 4;\n    ambientLight.color = new THREE.Color(0xff00de);\n    this.scene.add(ambientLight);\n  }\n\n  private initScene(): void {\n    this.scene = new THREE.Scene();\n    const loader = new THREE.TextureLoader();\n\n    if (this.showBackground && this.backgroundURL !== '') {\n      this.scene.background = loader.load(this.backgroundURL);\n    }\n  }\n\n  private initCamera(): void {\n    this.camera.position.x = this.cameraPosition.x;\n    this.camera.position.y = this.cameraPosition.y;\n    this.camera.position.z = this.cameraPosition.z;\n\n    const controls = new OrbitControls(this.camera, this.renderer.domElement);\n\n    controls.enablePan = false;\n    controls.enableKeys = false;\n    controls.enableZoom = false;\n    controls.enableRotate = false;\n  }\n\n  @action\n  private initRenderer(): void {\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.toneMappingExposure = Math.pow(4.0, 4.0);\n  }\n\n  @action\n  private starField(): void {\n    if (this.animationSpeed > 0) {\n      for (let i = 0; i < this.stars.length; i++) {\n        const star = this.stars[i];\n        star.position.z += i / this.starfieldDelay;\n\n        if (star.position.z > 1000) {\n          star.position.z -= 2000;\n        }\n      }\n    }\n  }\n\n  @action\n  public draw(): void {\n    this.instance = requestAnimationFrame(this.draw.bind(this));\n    this.renderer.autoClear = false;\n    this.renderer.clear();\n\n    const offset = Date.now() * this.animationSpeed * 3;\n\n    this.starField();\n    this.adjustVertices(offset);\n    this.adjustCameraPos(offset);\n    this.renderer.clearDepth();\n    this.composer.render();\n  }\n\n  public stop(): void {\n    cancelAnimationFrame(this.instance);\n  }\n\n  @action\n  private initNoise() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const SimplexNoise = require('simplex-noise');\n    this.simplex = new SimplexNoise();\n  }\n\n  @action\n  private adjustVertices(offset: number): void {\n    let inc;\n    for (let i = 0; i < this.terrain.geometry.vertices.length; i++) {\n      this.terrain.geometry.vertices[i].inc += 0.151;\n      inc = this.terrain.geometry.vertices[i].inc;\n      this.terrain.geometry.vertices[i].scl =\n        Math.cos(inc) * this.terrain.geometry.vertices[i].seed;\n      this.terrain.geometry.vertices[i].z = this.terrain.geometry.vertices[i].scl;\n      const vertex = this.terrain.geometry.vertices[i];\n      const x = vertex.x / this.zoomX;\n      const y = vertex.y / this.zoomY;\n      vertex.z = this.simplex.noise2D(x, y + offset) * this.noiseIntensity;\n    }\n    this.terrain.geometry.verticesNeedUpdate = true;\n    this.terrain.geometry.computeVertexNormals();\n  }\n\n  @action\n  private adjustCameraPos(offset: number) {\n    if (this.enableCameraJump) {\n      const x = this.camera.position.x / this.zoomX;\n      const y = this.camera.position.y / this.zoomY;\n      const noise = this.simplex.noise2D(x, y + offset) * this.cameraJumpIntensity;\n      this.camera.position.z = noise + 3.4;\n    }\n  }\n\n  private geometry(): THREE.PlaneGeometry {\n    return new THREE.PlaneGeometry(40, 40, this.hwSegments, this.hwSegments);\n  }\n\n  private material(): THREE.MeshPhongMaterial {\n    return new THREE.MeshPhongMaterial({\n      color: 0xe731ee,\n      opacity: 1,\n      // lights: true,\n      specular: 0xffffff,\n      blending: THREE.AdditiveBlending,\n      flatShading: true,\n      side: THREE.FrontSide,\n      transparent: true,\n      depthTest: false,\n      wireframe: true,\n      emissive: 0xe731ee,\n    });\n  }\n\n  @action\n  public randNum(n: number) {\n    const p =\n      (Math.random() +\n        Math.random() +\n        Math.random() +\n        Math.random() +\n        Math.random() +\n        Math.random() -\n        3) /\n      3;\n    return p * n;\n  }\n\n  @action\n  private initTerrain(): void {\n    this.terrain.castShadow = true;\n    this.terrain.receiveShadow = true;\n    this.scene.add(this.terrain);\n  }\n\n  @action\n  public addWordToScene(): void {\n    /*\n\t\t\tconst word: string = \"atari\";\n\n\t\t\tconst letterMeshes: THREE.Mesh[] = [];\n\n\t\t\tconst material =  new THREE.MeshBasicMaterial({color: 0xffffff});\n\n\t\t\tlet offset: number = 1;\n\n\t\t\tfor(let i = 0; i < word.length; i++) {\n\n\t\t\tlet letter = word[i];\n\n\t\t\tlet textMesh = new THREE.Mesh(new THREE.TextGeometry(letter, {\n\t\t\t\tfont: this.font,\n\t\t\t\tsize: 2.0,\n\t\t\t\theight: .2,\n\t\t\t\tcurveSegments: 12,\n\n\t\t\t\tbevelThickness: 0.5,\n\t\t\t\tbevelSize: 0.2,\n\n\t\t\t}), material);\n\n\t\t\ttextMesh.position.z += 10;\n\t\t\ttextMesh.rotateX(20.5);\n\t\t\ttextMesh.position.y += 0;\n\t\t\ttextMesh.position.x += offset - 30;\n\n\t\t\tthis.scene.add(textMesh)\n\t\t\toffset = offset + 3.2;\n\t\t}\n*/\n  }\n\n  @action\n  public async loadFont(fontName: string): Promise<void> {\n    const loader = new THREE.FontLoader();\n\n    loader.load(\n      'https://threejs.org/examples/fonts/' + fontName,\n      (font) => {\n        console.log('font loaded ok!');\n\n        // declare font\n        this.font = font;\n      },\n      (xhr) => {\n        // console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );\n      },\n      (err) => {\n        console.log('An error happened: ' + err);\n      },\n    );\n  }\n}\n","/Users/abulerforrest/workspace/wordrazer/src/components/pages/GamePage/GamePage.tsx",["223","224"],"import React, { createRef, Component } from 'react';\nimport { observer } from 'mobx-react';\n\nimport injectSheet, { WithSheet } from 'react-jss';\n\nimport { ITheme } from '../../../interfaces/Theme';\n\nimport { IGamePageController } from '../../../interfaces/pages';\n\nimport { Word } from '../../organisms/Word';\n\nimport PlayerStatus from '../../organisms/PlayerStatus/PlayerStatus';\n\nimport { PlayerRegistration } from '../../organisms/PlayerRegistration';\n\nimport { IThreeJSController } from '../../../interfaces/3Dengine/ThreeJSController';\n\nconst styles = (theme: ITheme) => ({\n  '@keyframes fadeIn': {\n    '0%': {\n      ...theme.animations.fadeIn.from,\n    },\n    '100%': {\n      ...theme.animations.fadeIn.to,\n    },\n  },\n  '@keyframes fadeInBlur': {\n    '0%': {\n      ...theme.animations.fadeInBlur.from,\n    },\n    '100%': {\n      ...theme.animations.fadeInBlur.to,\n    },\n  },\n\n  '@keyframes bgPan': {\n    '0%': {\n      backgroundPosition: '50% 0%',\n    },\n    '100%': {\n      backgroundPosition: '50% 100%',\n    },\n  },\n\n  '@keyframes blurExpandFade': {\n    '0%': {\n      ...theme.animations.blurExpandFade[0],\n    },\n    '60%': {\n      ...theme.animations.blurExpandFade[60],\n    },\n    '100%': {\n      ...theme.animations.blurExpandFade[100],\n    },\n  },\n\n  '@keyframes changeColor': {\n    '0%': {\n      ...theme.animations.changeColor.from,\n    },\n    '100%': {\n      ...theme.animations.changeColor.from,\n    },\n  },\n  root: {\n    width: '100%',\n    display: 'flex',\n    height: '100vh',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundImage: theme.palette.gradient[0],\n    animation: theme.animations.fadeIn.animation,\n  },\n\n  background: {\n    backgroundAttachment: 'fixed',\n    backgroundPosition: '100% 100%',\n    animation: theme.animations.fadeInBlur.animation,\n  },\n\n  gameRoot: {\n    display: 'flex',\n    width: '100%',\n    height: '100vh',\n    marginTop: 250,\n    userSelect: 'none',\n    justifyContent: 'center',\n  },\n\n  gameCanvasContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    position: 'absolute',\n    width: '100%',\n    height: '100vh',\n  },\n\n  playerRegContainer: {\n    width: 400,\n    position: 'absolute',\n  },\n\n  countDownText: {\n    position: 'absolute',\n    transform: 'translateX(-50%)',\n    top: '30%',\n    alignItems: 'center',\n    filter: 'blur(0.4px)',\n    display: 'flex',\n    letterSpacing: 1,\n    color: theme.palette.white,\n    textShadow: theme.typography.textShadowSecondary,\n    fontSize: 90,\n    textTransform: 'uppercase',\n    fontFamily: theme.typography.hiscorePrimary,\n  },\n\n  startText: {\n    justifyContent: 'center',\n    display: 'block',\n    textAlign: 'center',\n    position: 'absolute',\n    left: '0',\n    right: '0',\n    margin: 'auto',\n    top: '30%',\n    alignItems: 'center',\n    fontSize: 95,\n    textTransform: 'uppercase',\n    color: theme.palette.primaryLight,\n    fontFamily: theme.typography.hiscorePrimary,\n    textShadow: theme.typography.textShadowPrimary,\n    letterSpacing: theme.typography.letterSpacing.small,\n    animation: theme.animations.blurExpandFade.animation,\n  },\n});\n\nexport interface IGamePageProps {\n  controller: IGamePageController;\n  threeJSController: IThreeJSController;\n}\n\ntype GamePageProps = IGamePageProps & WithSheet<typeof styles>;\n\n@observer\nclass GamePage extends Component<GamePageProps> {\n  private canvasRef: any = createRef<HTMLElement>();\n\n  constructor(props: any) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { threeJSController } = this.props;\n\n    this.canvasRef.appendChild(threeJSController.renderer.domElement);\n\n    function initEventListeners() {\n      window.addEventListener('resize', onWindowResize);\n    }\n\n    function onWindowResize() {\n      threeJSController.camera.aspect = window.innerWidth / window.innerHeight;\n      threeJSController.renderer.setSize(window.innerWidth, window.innerHeight);\n      threeJSController.camera.updateProjectionMatrix();\n    }\n\n    threeJSController.loadFont('helvetiker_regular.typeface.json');\n    threeJSController.addWordToScene();\n\n    // 3D canvas options\n    threeJSController.showBackground = true;\n    //threeJSController.backgroundURL = '';\n\n    // init 3D canvas\n    threeJSController.setup();\n    initEventListeners();\n  }\n\n  private renderWords(): React.ReactNode {\n    const { controller } = this.props;\n\n    if (controller.gameHasStarted && controller.countDownNumber === 0) {\n      return (\n        <div>\n          <Word word=\"word\" />\n        </div>\n      );\n    }\n  }\n\n  private renderPlayerRegistration(): React.ReactNode {\n    const { controller, classes } = this.props;\n\n    if (controller.showPlayerRegistration && !controller.gameHasStarted) {\n      return (\n        <div className={classes.playerRegContainer}>\n          <PlayerRegistration controller={controller} />\n        </div>\n      );\n    }\n  }\n\n  private renderCountDownText(): React.ReactNode {\n    const { classes, controller } = this.props;\n\n    const { countDownNumber } = controller;\n\n    if (countDownNumber > 0) {\n      return <div className={classes.countDownText}>{countDownNumber}</div>;\n    } else {\n      return <div className={classes.startText}>Start</div>;\n    }\n  }\n\n  private renderGamePlayCanvas(): React.ReactNode {\n    const { classes, controller } = this.props;\n\n    const runAnimation = controller.runBackgroundAnim ? 'running' : 'paused';\n\n    if (!controller.showPlayerRegistration) {\n      return (\n        <div>\n          {this.renderCountDownText()}\n          <PlayerStatus controller={controller} />\n          <div\n            className={classes.gameCanvasContainer}\n            style={{ animationPlayState: runAnimation }}\n          />\n        </div>\n      );\n    }\n  }\n\n  render(): React.ReactNode {\n    const { classes, controller } = this.props;\n\n    let backgroundClass = null;\n\n    if (controller.gameHasStarted) {\n      backgroundClass = classes.background;\n    }\n\n    const gameRootClasses = `\n\t\t\t${classes.root}\n\t\t\t${backgroundClass}\n\t\t`;\n\n    return (\n      <div className={gameRootClasses} ref={(node) => (this.canvasRef = node)}>\n        {this.renderGamePlayCanvas()}\n        {this.renderPlayerRegistration()}\n      </div>\n\n      // <div className={gameRootClasses}>\n      // \t{this.renderPlayerRegistration()}\n      // \t{this.renderGamePlayCanvas()}\n      // \t{this.renderWords()}\n\n      // </div>\n    );\n  }\n}\n\nexport default injectSheet(styles)(GamePage);\n","/Users/abulerforrest/workspace/wordrazer/src/components/organisms/PlayerStatus/PlayerStatus.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/components/pages/TitlePage/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/organisms/Word/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/organisms/PlayerRegistration/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/pages/TitlePage/TitlePage.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/components/organisms/Word/Word.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/components/organisms/PlayerRegistration/PlayerRegistration.tsx",["225","226"],"import * as React from 'react';\nimport { observer } from 'mobx-react';\n\nimport { withRouter } from 'react-router-dom';\n\nimport { ITheme } from '../../../interfaces/Theme';\nimport injectSheet, { WithSheet } from 'react-jss';\n\nimport { Button } from '../../atoms/Button';\nimport { Input } from '../../molecules/Input';\n\nimport { Typography } from '../../atoms/Typography';\n\nimport { IGamePageController } from '../../../interfaces/pages';\n\nconst styles = (theme: ITheme) => ({\n  '@keyframes slideTop': {\n    '0%': {\n      ...theme.animations.slideTop.from,\n    },\n    '100%': {\n      ...theme.animations.slideTop.to,\n    },\n  },\n  '@keyframes vibrations2': {\n    '0%': {\n      ...theme.animations.vibrations2[0],\n    },\n    '40%': {\n      ...theme.animations.vibrations2[40],\n    },\n    '60%': {\n      ...theme.animations.vibrations2[60],\n    },\n    '80%': {\n      ...theme.animations.vibrations2[80],\n    },\n    '100%': {\n      ...theme.animations.vibrations2[100],\n    },\n  },\n  root: {\n    animation: theme.animations.slideTop.animation,\n  },\n\n  descriptionText: {\n    textAlign: 'center',\n    textShadow: theme.typography.textShadowLight,\n    animation: theme.animations.vibrations2.animation,\n  },\n});\n\nexport interface IPlayerRegistrationProps {\n  controller: IGamePageController;\n}\n\ntype PlayerRegistrationProps = IPlayerRegistrationProps & WithSheet<typeof styles>;\n\n@observer\nclass PlayerRegistration extends React.Component<PlayerRegistrationProps> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  render(): React.ReactNode {\n    const { theme, classes, controller } = this.props;\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const ButtonComponent = withRouter(({ history }) => {\n      // eslint-disable-next-line @typescript-eslint/no-empty-function\n      let startGame = () => {};\n\n      if (controller.inputValidated) {\n        startGame = () => {\n          controller.startGame();\n        };\n      }\n\n      return (\n        <Button\n          state={controller.inputValidated ? 'success' : 'disabled'}\n          margin={'30px 0 0 0 '}\n          title={'Start game'}\n          onClick={startGame}\n          uppercase\n          bold\n        />\n      );\n    });\n\n    return (\n      <div className={classes.root}>\n        <Typography\n          className={classes.descriptionText}\n          fontSize={theme.typography.size.medium}\n          letterSpacing={theme.typography.letterSpacing.large}\n          color={theme.palette.white}\n          margin=\"0 0 20px 0\"\n          uppercase\n          bold\n        >\n          Before we begin, please enter your desired name below so we can calculate your hiscore.\n        </Typography>\n\n        <Input\n          label=\"Name\"\n          value={controller.viewModel.model.name}\n          placeholder={'________________'}\n          validationText={\n            controller.inputValidated ? \"Alrighty then, let's go!\" : controller.textValidateMessage\n          }\n          state={controller.inputState as any}\n          showClear={controller.showInputClearIcon}\n          onChange={(event) => controller.onInputKeypress(event.target.value)}\n          onClear={() => controller.clearInput('name')}\n          uppercase\n        />\n        <ButtonComponent />\n      </div>\n    );\n  }\n}\n\nexport default injectSheet(styles)(PlayerRegistration);\n","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Letter/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/organisms/Hiscore/Hiscore.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Letter/Letter.tsx",["227"],"import * as React from 'react';\nimport { observer } from 'mobx-react';\n\nimport { ITheme } from '../../../interfaces/Theme';\nimport injectSheet, { WithSheet } from 'react-jss';\n\nconst styles = (theme: ITheme) => ({\n  '@keyframes letterFocusExpand1': {\n    '0%': {\n      ...theme.animations.letterFocusExpand1.from,\n    },\n    '100%': {\n      ...theme.animations.letterFocusExpand1.to,\n    },\n  },\n  '@keyframes letterFocusExpand2': {\n    '0%': {\n      ...theme.animations.letterFocusExpand2.from,\n    },\n    '100%': {\n      ...theme.animations.letterFocusExpand2.to,\n    },\n  },\n\n  '@keyframes fadeOut': {\n    '0%': {\n      ...theme.animations.fadeOut.from,\n    },\n    '100%': {\n      ...theme.animations.fadeOut.to,\n    },\n  },\n\n  '@keyframes fadeOut2': {\n    '0%': {\n      ...theme.animations.fadeOut.from,\n    },\n    '100%': {\n      ...theme.animations.fadeOut.to,\n    },\n  },\n\n  root: {\n    position: 'absolute',\n    zIndex: 40,\n    textTransform: 'uppercase',\n    fontSize: 60,\n    filter: 'brightness(2)',\n    marginTop: -5,\n    userSelect: 'none',\n    fontFamily: theme.typography.hiscorePrimary,\n  },\n\n  letterAnim1: {\n    color: theme.palette.primary,\n    animation: theme.animations.letterFocusExpand1.animation + ', fadeOut 6s',\n  },\n\n  letterAnim2: {\n    color: theme.palette.secondary,\n    animation: theme.animations.letterFocusExpand2.animation + ', fadeOut2 3s',\n  },\n});\n\nexport interface ILetterProps {\n  textInput: string;\n  showLetter: boolean;\n  onKeyDown?: (event: React.KeyboardEvent<HTMLElement>) => void;\n}\n\ntype LetterProps = ILetterProps & WithSheet<typeof styles>;\n\n@observer\nclass Letter extends React.Component<LetterProps> {\n  constructor(props: any) {\n    super(props);\n\n    const { classes, onKeyDown } = props;\n\n    // Event listener\n    document.addEventListener('keydown', (event) => {\n      onKeyDown(event);\n\n      const element = document.getElementById('letter');\n\n      // Toggle anim classes with JS\n      element?.classList.toggle(classes.letterAnim1);\n      element?.classList.toggle(classes.letterAnim2);\n    });\n  }\n\n  render(): React.ReactNode {\n    const { classes, textInput, showLetter } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <div id=\"letter\" className={classes.letterAnim1}>\n          {showLetter ? textInput : ''}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectSheet(styles)(Letter);\n","/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Button/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Logo/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Typography/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Link/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/GameTimer/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/molecules/Input/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Button/Button.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Logo/Logo.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Typography/Typography.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/Link/Link.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/components/atoms/GameTimer/GameTimer.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/components/molecules/Input/Input.tsx",[],[],"/Users/abulerforrest/workspace/wordrazer/src/index.tsx",["228","229","230"],"import React from 'react';\nimport { render } from 'react-dom';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport injectSheet, { ThemeProvider } from 'react-jss';\n\nimport App from './App';\n\nimport { ITheme } from './interfaces/Theme';\nimport { defaultTheme } from './themes/theme';\n\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport { GamePage } from './components/pages/GamePage';\nimport { GamePageController } from './controllers';\nimport { ThreeJSController } from './controllers/3Dengine/ThreeJSController';\nimport { RootStore } from './stores/RootStore';\nimport { GamePageService } from './services/GamePageService';\nimport { IServices } from './services/createServices';\n\nconst services: Partial<IServices> = {\n  gamePageService: new GamePageService(),\n};\n\nconst rootStore = new RootStore(services as IServices);\n\nconst threeJSController = new ThreeJSController();\nconst gamePageController = new GamePageController(rootStore, threeJSController);\n\nconst styles = (theme: ITheme) => ({\n  root: {},\n});\n\nconst styledApp = (Component: any) => {\n  const WrappedClass = ({ classes }: any) => (\n    <div className={classes.root}>\n      <Component threeJSController={threeJSController} controller={gamePageController} />\n    </div>\n  );\n\n  const InjectedStyle = injectSheet(styles)(WrappedClass);\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      <InjectedStyle />\n    </ThemeProvider>\n  );\n};\n\nrender(\n  <Router>\n    <Route exact path=\"/\" component={() => styledApp(App)} />\n    <Route path=\"/init\" component={() => styledApp(GamePage)} />\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/Users/abulerforrest/workspace/wordrazer/src/controllers/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/components/pages/index.tsx",[],"/Users/abulerforrest/workspace/wordrazer/src/controllers/pages/index.ts",[],"/Users/abulerforrest/workspace/wordrazer/src/controllers/pages/TitlePageController.tsx",[],{"ruleId":"231","severity":1,"message":"232","line":26,"column":8,"nodeType":"233","messageId":"234","endLine":26,"endColumn":42},{"ruleId":"231","severity":1,"message":"232","line":133,"column":8,"nodeType":"233","messageId":"234","endLine":133,"endColumn":29},{"ruleId":"235","severity":1,"message":"236","line":6,"column":34,"nodeType":"237","messageId":"238","endLine":6,"endColumn":47},{"ruleId":"235","severity":1,"message":"239","line":7,"column":11,"nodeType":"237","messageId":"238","endLine":7,"endColumn":28},{"ruleId":"240","severity":1,"message":"241","line":37,"column":29,"nodeType":"242","messageId":"243","endLine":37,"endColumn":32,"suggestions":"244"},{"ruleId":"240","severity":1,"message":"241","line":38,"column":37,"nodeType":"242","messageId":"243","endLine":38,"endColumn":40,"suggestions":"245"},{"ruleId":"240","severity":1,"message":"241","line":40,"column":39,"nodeType":"242","messageId":"243","endLine":40,"endColumn":42,"suggestions":"246"},{"ruleId":"240","severity":1,"message":"241","line":200,"column":24,"nodeType":"242","messageId":"243","endLine":200,"endColumn":27,"suggestions":"247"},{"ruleId":"235","severity":1,"message":"248","line":240,"column":21,"nodeType":"237","messageId":"238","endLine":240,"endColumn":33},{"ruleId":"240","severity":1,"message":"241","line":18,"column":18,"nodeType":"242","messageId":"243","endLine":18,"endColumn":21,"suggestions":"249"},{"ruleId":"250","severity":1,"message":"251","line":18,"column":19,"nodeType":"252","messageId":"253","endLine":18,"endColumn":26},{"ruleId":"250","severity":1,"message":"251","line":24,"column":17,"nodeType":"252","messageId":"253","endLine":24,"endColumn":27},{"ruleId":"250","severity":1,"message":"251","line":25,"column":19,"nodeType":"252","messageId":"253","endLine":25,"endColumn":31},{"ruleId":"250","severity":1,"message":"251","line":26,"column":20,"nodeType":"252","messageId":"253","endLine":26,"endColumn":33},{"ruleId":"250","severity":1,"message":"251","line":27,"column":20,"nodeType":"252","messageId":"253","endLine":27,"endColumn":33},{"ruleId":"250","severity":1,"message":"251","line":28,"column":20,"nodeType":"252","messageId":"253","endLine":28,"endColumn":33},{"ruleId":"250","severity":1,"message":"251","line":29,"column":23,"nodeType":"252","messageId":"253","endLine":29,"endColumn":39},{"ruleId":"231","severity":1,"message":"232","line":1,"column":32,"nodeType":"254","messageId":"234","endLine":1,"endColumn":37},{"ruleId":"250","severity":1,"message":"251","line":13,"column":19,"nodeType":"252","messageId":"253","endLine":13,"endColumn":24},{"ruleId":"250","severity":1,"message":"251","line":19,"column":18,"nodeType":"252","messageId":"253","endLine":19,"endColumn":27},{"ruleId":"250","severity":1,"message":"251","line":20,"column":19,"nodeType":"252","messageId":"253","endLine":20,"endColumn":29},{"ruleId":"240","severity":1,"message":"241","line":33,"column":32,"nodeType":"242","messageId":"243","endLine":33,"endColumn":35,"suggestions":"255"},{"ruleId":"240","severity":1,"message":"241","line":37,"column":32,"nodeType":"242","messageId":"243","endLine":37,"endColumn":35,"suggestions":"256"},{"ruleId":"240","severity":1,"message":"241","line":45,"column":38,"nodeType":"242","messageId":"243","endLine":45,"endColumn":41,"suggestions":"257"},{"ruleId":"240","severity":1,"message":"241","line":116,"column":13,"nodeType":"242","messageId":"243","endLine":116,"endColumn":16,"suggestions":"258"},{"ruleId":"231","severity":1,"message":"232","line":307,"column":3,"nodeType":"259","messageId":"234","endLine":308,"endColumn":28},{"ruleId":"235","severity":1,"message":"260","line":377,"column":8,"nodeType":"237","messageId":"238","endLine":377,"endColumn":11},{"ruleId":"240","severity":1,"message":"241","line":149,"column":22,"nodeType":"242","messageId":"243","endLine":149,"endColumn":25,"suggestions":"261"},{"ruleId":"240","severity":1,"message":"241","line":151,"column":22,"nodeType":"242","messageId":"243","endLine":151,"endColumn":25,"suggestions":"262"},{"ruleId":"240","severity":1,"message":"241","line":61,"column":22,"nodeType":"242","messageId":"243","endLine":61,"endColumn":25,"suggestions":"263"},{"ruleId":"240","severity":1,"message":"241","line":112,"column":43,"nodeType":"242","messageId":"243","endLine":112,"endColumn":46,"suggestions":"264"},{"ruleId":"240","severity":1,"message":"241","line":75,"column":22,"nodeType":"242","messageId":"243","endLine":75,"endColumn":25,"suggestions":"265"},{"ruleId":"235","severity":1,"message":"266","line":32,"column":17,"nodeType":"237","messageId":"238","endLine":32,"endColumn":30},{"ruleId":"240","severity":1,"message":"241","line":36,"column":31,"nodeType":"242","messageId":"243","endLine":36,"endColumn":34,"suggestions":"267"},{"ruleId":"240","severity":1,"message":"241","line":37,"column":38,"nodeType":"242","messageId":"243","endLine":37,"endColumn":41,"suggestions":"268"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","@typescript-eslint/no-unused-vars","'count' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["269","270"],["271","272"],["273","274"],["275","276"],"'type' is defined but never used.",["277","278"],"@typescript-eslint/no-non-null-assertion","Forbidden non-null assertion.","TSNonNullExpression","noNonNull","ArrowFunctionExpression",["279","280"],["281","282"],["283","284"],["285","286"],"FunctionExpression","'xhr' is defined but never used.",["287","288"],["289","290"],["291","292"],["293","294"],["295","296"],"'theme' is defined but never used.",["297","298"],["299","300"],{"messageId":"301","fix":"302","desc":"303"},{"messageId":"304","fix":"305","desc":"306"},{"messageId":"301","fix":"307","desc":"303"},{"messageId":"304","fix":"308","desc":"306"},{"messageId":"301","fix":"309","desc":"303"},{"messageId":"304","fix":"310","desc":"306"},{"messageId":"301","fix":"311","desc":"303"},{"messageId":"304","fix":"312","desc":"306"},{"messageId":"301","fix":"313","desc":"303"},{"messageId":"304","fix":"314","desc":"306"},{"messageId":"301","fix":"315","desc":"303"},{"messageId":"304","fix":"316","desc":"306"},{"messageId":"301","fix":"317","desc":"303"},{"messageId":"304","fix":"318","desc":"306"},{"messageId":"301","fix":"319","desc":"303"},{"messageId":"304","fix":"320","desc":"306"},{"messageId":"301","fix":"321","desc":"303"},{"messageId":"304","fix":"322","desc":"306"},{"messageId":"301","fix":"323","desc":"303"},{"messageId":"304","fix":"324","desc":"306"},{"messageId":"301","fix":"325","desc":"303"},{"messageId":"304","fix":"326","desc":"306"},{"messageId":"301","fix":"327","desc":"303"},{"messageId":"304","fix":"328","desc":"306"},{"messageId":"301","fix":"329","desc":"303"},{"messageId":"304","fix":"330","desc":"306"},{"messageId":"301","fix":"331","desc":"303"},{"messageId":"304","fix":"332","desc":"306"},{"messageId":"301","fix":"333","desc":"303"},{"messageId":"304","fix":"334","desc":"306"},{"messageId":"301","fix":"335","desc":"303"},{"messageId":"304","fix":"336","desc":"306"},"suggestUnknown",{"range":"337","text":"338"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"337","text":"339"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"340","text":"338"},{"range":"340","text":"339"},{"range":"341","text":"338"},{"range":"341","text":"339"},{"range":"342","text":"338"},{"range":"342","text":"339"},{"range":"343","text":"338"},{"range":"343","text":"339"},{"range":"344","text":"338"},{"range":"344","text":"339"},{"range":"345","text":"338"},{"range":"345","text":"339"},{"range":"346","text":"338"},{"range":"346","text":"339"},{"range":"347","text":"338"},{"range":"347","text":"339"},{"range":"348","text":"338"},{"range":"348","text":"339"},{"range":"349","text":"338"},{"range":"349","text":"339"},{"range":"350","text":"338"},{"range":"350","text":"339"},{"range":"351","text":"338"},{"range":"351","text":"339"},{"range":"352","text":"338"},{"range":"352","text":"339"},{"range":"353","text":"338"},{"range":"353","text":"339"},{"range":"354","text":"338"},{"range":"354","text":"339"},[1535,1538],"unknown","never",[1583,1586],[1704,1707],[5888,5891],[539,542],[1449,1452],[1680,1683],[2021,2024],[3782,3785],[3408,3411],[3462,3465],[1480,1483],[2978,2981],[1676,1679],[1092,1095],[1139,1142]]